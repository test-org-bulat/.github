# This workflow will bring the submodules of this repository in sync with their
# latest HEAD. If there are changes to be made it will open a new PR (or update
# an existing PR if one already exists) for those changes, and set that PR up
# auto-merge as soon as all checks pass.
name: Submodules Sync

on:
  # Allows you to run this workflow manually from the Actions tab or through
  # the HTTP API.
  workflow_call:
    secrets:
      my_token:
        required: true
      gith_token:
        required: true

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.my_token }}
          submodules: recursive
      - id: set-matrix
        name: Set matrix based on modified submodules
        run: |
          git submodule update --recursive --remote
          if [[ $(git ls-files -m) ]]; then
              echo "::set-output name=path_matrix::[$(git ls-files -m | awk '{ printf "%s\"%s\"", (NR==1?"":", "), $0 } END{ print "" }')]"
              echo "::set-output name=contains_changes::['true']"
          else
              echo "No changed files found"
              echo "::set-output name=contains_changes::['false']"
          fi
    outputs:
      path_matrix: ${{ steps.set-matrix.outputs.path_matrix }}
      contains_changes: ${{ steps.set-matrix.outputs.contains_changes }}

  sync:
    name: Submodules Sync
    needs: build-matrix
    if: contains(needs.build-matrix.outputs.contains_changes, 'true')
    runs-on: ubuntu-latest
    strategy:
      matrix:
         path: ${{ fromJson(needs.build-matrix.outputs.path_matrix) }}
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner.
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        # The private submodules need to get pulled using some credentials.
        # We can choose between Deploy Keys and Personal Access Tokens.
        # Deploy Keys only work for one repo, and we can only specify one per
        # `checkout`, which means we can only pull one submodule per
        # `checkout` - untenable given our already-large-and-growing nested
        # tree of submodules. A Personal Access Token (PAT) lets us identify
        # ourselves as a GitHub user; if we use a dedicated user for that
        # purpose that's about equally powerful as a large collection of
        # Deploy Keys would be, but works for all repositories that we need to
        # pull, allowing us to do a single `checkout` to get our full source
        # tree. Hence we have our `Rebot` user, and use a PAT for that user.
        token: ${{ secrets.my_token }}
        submodules: recursive

    # Update references.
    - name: Submodule Update
      run: git submodule update --remote ${{ matrix.path }}

    # The following action will commit all changes to the repo (if any), and
    # either:
    # A) Do nothing, because no changes were committed.
    # B) Open a PR to merge the changes to `main`, because no PR existed yet.
    # C) Update an existing PR that was already proposing earlier submodule
    #    updates to also include these latest changes.
    #
    # Since these PRs will only get merged when all checks pass, scenario (C)
    # is most likely to happen when checks fail. In that case there are two
    # possible ways forward:
    #   1. A subsequent update to a submodule fixes the situation, and a later
    #      run of this workflow will update the previously-broken PR to use the
    #      fixed submodule, bringing the PR into a healthy state.
    #   2. The submodule intentionally broke `respect-integration` (this should
    #      be rare) and a human will need to fix to `respect-integration` to
    #      be able to do the submodule update. The human will have to close the
    #      broken PR after they make the fix, so that Rebot will retry the
    #      automatic integration on a subsequent run.
    #
    # Note that Rebot does not automatically close PRs that have become
    # obsolete due to human action, although it will happily re-use an
    # abandoned-but-not-closed PR for later runs that make new updates.
    - name: Create Pull Request or update existing
      id: pr
      uses: peter-evans/create-pull-request@v3
      with:
        # To trigger further workflow runs that would usually be triggered by a
        # PR being opened, we cannot use the standard `GITHUB_TOKEN`, but must
        # use a Personal Access Token instead. See docs:
        #   https://github.com/peter-evans/create-pull-request/blob/main/docs/concepts-guidelines.md#triggering-further-workflow-runs
        # We re-use the one use to pull the repo, above.
        token: ${{ secrets.my_token }}
        # The following email address is Rebot's GitHub address - see:
        #   https://github.com/settings/emails
        committer: Bulat Nizamutdinov <Bulat.Nizamutdinov@itechart-group.com>
        author: Bulat Nizamutdinov <Bulat.Nizamutdinov@itechart-group.com>
        commit-message: "[submodule-sync: ${{ matrix.path }}] Update submodule to its latest version"
        title: "[submodule-sync: ${{ matrix.path }}] Update submodule to its latest version"
        body: "Automated update of our submodules to their latest version, by the `submodules-sync` workflow."
        branch: "${{ matrix.path }}-submodule-sync.latest"
        add-paths: ${{ matrix.path }}
        # If a previous run had already created the `submodule-sync.latest`
        # branch, remove that first, start fresh. This ensures that the PR we
        # open or update always has exactly one commit in it.
        delete-branch: true

#    - name: Set auto-merge on PR
#      # We only need to do this when the PR is first created, not on subsequent
#      # updates.
#      #
#      # This action is picky about when it's allowed to be run:
#      # - There MUST be a branch protection rule that prevents this PR from
#      #   immediately getting merged.
#      # - The branch MUST have auto-merging permitted in its settings.
#      if: steps.pr.outputs.pull-request-operation == 'created'
#      uses: peter-evans/enable-pull-request-automerge@v1
#      with:
#        # We must use a Personal Access Token (PAT) here; see docs:
#        #   https://github.com/peter-evans/enable-pull-request-automerge
#        token: ${{ secrets.my_token }}
#        pull-request-number: ${{ steps.pr.outputs.pull-request-number }}
#        merge-method: "rebase"

    - name: Auto-approve PR
      # We only need to do this when the PR is first created, not on subsequent
      # updates.
      if: steps.pr.outputs.pull-request-operation == 'created'
      uses: juliangruber/approve-pull-request-action@v1
      with:
        github-token: ${{ secrets.gith_token }}
        number: ${{ steps.pr.outputs.pull-request-number }}